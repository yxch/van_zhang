
MongoDB 由databases组成，databases由collections组成，collections由documents（相当于行）组成，而documents有fields（相当于列)组成。
MongoDB是异步写数据

文档是MongoDB中数据的基本单元，非常类似于关系数据库管理系统中的行(但比行要复杂得多)
类似地，集合可以被看做是没有模式的表
MongoDB的单个实例可以容纳从外独立的数据库，每一个都有自己的集合和权限
MongoDB自带简洁但功能 强大的JavaScript Shell,这个工具对于管理MongoDB实例和操作数据作用非常大。
每一个文档都有一个特殊的键"_id"，它在文档所处的集合是唯一的。


文档
文档的键是字符串。除了少数例外情况，键可以使用做UTF-8字符
键不能含有\0（空字符)，这个字符用来表示键的结尾
.和$有特殊的意义，只有在特定环境下才能使用。通常来说是被保留了，使用不当的话，驱动程序会提示
以下划线"_"开头的键是保留的，但这个不是严格要求的
MongoDB不但区分类型，也区分大小写。MongoDB的文档不能有重复的键。

集合
集合就是一组文档。如果说MongoDB中文档类似于关系型数据库的行，那么集合就如同表。集合是无模式的。这意味着一个集合里面的文档可以是各式
各样的。

集合的命名规则
集合名不能是空字符串"".
集合名不能含有\0字符（空字符），这个字符表示集合的结尾
集合名不能system.开头，这是为系统集合保留的前缘。system.users这个集合保存着数据库的用户信息,system.namespaces集合保存着所有数据库
集合的信息
用户创建的集合名字不能含有保留字符$。有些驱动程序的确支持在集合名里面包含$，这是因为某些系统生成的集合中包含该字符。除非你要访问问这
系统创建的集合，否则千万不要在名字里出现$

在MongoDB中使用子集合来组织数据是很好的方法，强烈推荐。

数据库
MongoDB中多个文档组成集合，同样多个集合可以组成数据库。应该将一个应用的所有数据都存储在同一个数据库中。
数据库名可以是满足以下条件的做UTF-8字符串。
不能是空字符""
不得含有''空格 . $ / \ 和\0（空字符)
应该全部小写
最多64字节


启动mongoDB(windows)
cd "Program Files\MongoDB\Server\3.0\bin"
mongod.exe

启动mongo shell
另开一个命令行窗口，切换到安装路径
mongo.exe

基本操作

>use foobar
>db
>post = {"title":"My Blog Post"}
>db.blog.insert(post)
>db.blog.find()  //查找集合里的所有文档
>db.blog.findOne() //查看一个文档
>db.blog.insert({"bar":"baz"})


>post.comments = []
>db.blog.update({title:"My Blog Post"},post)

>db.blog.remove({"title":"My Blog Post"}) 在不使用限定条件下将永远删除集合里的所有文档


索引

对于同一个集合，同样的索引只需要创建一次。
db.people.ensureIndex({"username":1})
创建索引的缺点就是每次插入、更新和删除时都会产生额外的开销。这是因为数据库不但需要执行这些操作，还要将这些操作在集合的索引中标记
。因此，要尽可能少创建索引。每个集合默认的最大索引个数为64个，能够应付绝大多数情况。
一定不要索引每一个键，这会导致插入非常慢，还会占用很多空间，并且很可能对查询速度提升不大。

创建唯一索引
>db.people.ensureIndex({"username":1},{"unique":true})

聚合
>db.foo.count() //返回集合中的文档数量
>db.runCommand({"distinct":"people","key":"age"}) //用来找出给定健的所有不同的值。使用时必须指定集合和键

>db.runCommand({"distinct":"people","key","age"}); 用来找出给定键的所有不同的值，使用时必须指定集合和键
有没有一种方法获得集合里面所有不同的的键呢？没有！！

>db.runCommand("group":{"ns":"stocks","key":"day","initial":{"time":0},"$reduce":function(doc,prev){
    if(doc.time > prev.time){prev.price = doc.price;prev.time = doc.time;}
  },
  "condition":{"day":{"$gt":"2010/09/30"}} //这里的condition可以写成cond或q
});
group做的聚合稍微复杂一些。先选定分组所依据的键，而后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每
一组内的文档，产生一个结果文档。

>完成器 finalizer 用以精简从数据库传到用户的数据

固定集合
特性：1.对固定集合进行插入速度极快 2.按照插入顺序输出的查询速度极快，默认情况下，对固定集合进行查找都会以插入顺序返回结果
3.固定集合能够在新数据插入时，自动淘汰最早的数据。
固定集合有个很好的用法，就是缓存少量的文档。一般来说，固定集合适用于任何想要自动淘汰过期属性的场景，没有太多的操作限制。

>db.createCollection("my_collection",{capped:true,size:100000,max:100});
>db.runCommand({convertToCapped:"test",size:10000}); //转换普通的集合为固定集合
>db.my_collection.find().sort({"$natural":-1}) //按照自然排序的反向插入的顺序查询
尾部游标只能用在固定集合上。


GridFs 存储文件
1.利用GridFS可以简化需求。要是已用了MongoDB,GridFS就可以不需要使用独立文件存储架构
2.GridFS会直接利用业已建立的复制或分片机制，所以对于文件存储来说故障恢复和扩展都很容易
GridFS可以避免用于存储用户上会以内容的文件系统出现的某些问题。
GridFS不产生磁盘碎片，因为MongoDB分配数据文件空间时以2GB为一块










