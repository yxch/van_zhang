
https://docs.mongodb.com/manual/core/document/


优化数据类型提高性能的主要在于以下几个方面： 
1. 通过选用更“小”的数据类型减少存储空间，使查询相同数据需要的IO 资源降低； 
2. 通过合适的数据类型加速数据的比较

=================================================================================================================

PostgreSQL  PHP模式   EA11  Sass Javascript 7

面向对象应该牢记：保持对象小型化，模块化，非耦合以及流线型 。

=================================================================================================================
www.multimall.cn  卖家（vendor）  商品(wares)   订单(order)   买家（buyer） 

useradd -o -u 0 -g 0 -M -d /root -s /bin/bash vxzhan
select (@i:=@i+1) as i,post_time from tb_check_price,(select @i:=0) as tt  order by post_time desc; 

http://auto.sohu.com/20160607/n453446539.shtml  驾驶证到期还去车管所？你真是out了
=================================================================================================================

http://cache.baiducontent.com/c?m=9f65cb4a8c8507ed4fece7631046893b4c4380146d96864968d4e414c4224600003ab3e66c351770d3c77b651cfc091ab1a168252a5577f1c893d60bc0bc902e2e8926307108c31c528516fc8915749b77875b99b868e0ad873484d8d6c4ae5544cb235f3cc6b2ca&p=882a9645d7d212a05aa6c931445598&newp=8d7bcd299e9e12a05abd9b7d0d1788231610db2151d4d1146b82c825d7331b001c3bbfb423221a07d2c4786304ad4e5fe9fb31753c072ba3dda5c91d9fb4c57479&user=baidu&fm=sc&query=apache%C5%E4%D6%C3https&qid=ebceea2f0015d590&p1=11
http://cache.baiducontent.com/c?m=9f65cb4a8c8507ed4fece7631046893b4c4380146d96864968d4e414c42246090137bdf127201306ce963c215afe170bf7a6613464587ef686cc8241d9ba932c3bcd7a742613da14498f53b8ca3632b027872defb86fe3ad813384afa2899912118b&p=882a9645d0af33fc57eff827495d97&newp=8063c64ad48711a05bed926d554ccc231610db2151d4db1e6b82c825d7331b001c3bbfb423221a04d1c17e650ba94c5de0f73673340225a3dda5c91d9fb4c57479cc&user=baidu&fm=sc&query=nginx%C5%E4%D6%C3https&qid=80d4a5780013f27a&p1=5
http://cache.baiducontent.com/c?m=9d78d513d99b00b8589cc0255341c0676914d7306a8090027fa5870fd33a541b0120a1ac26510d19839b213216af3e0daba66a6537747ce0ddd5c013dbba972a248823327701d501548848f19c5b739666c301b7ee04edbff63597a8d7&p=ce7ddc1187904ead00bd9b7d0d1d94&newp=8f338916d9c118fb43bd9b7d0d1d91231610db2151d6db01298ffe0cc4241a1a1a3aecbf27281705d8c07c640ba9425ce1f634723d0834f1f689df08d2ecce7e76dc3c&user=baidu&fm=sc&query=js+FileReader%28%29&qid=94d3ef46000b817e&p1=1



=================================================================================================================
公用顶部内容
<link rel="stylesheet" href="/wx/cross/m_css_common.css" />
<link rel="stylesheet" href="/wx/cross/m_css_media_query.css" />
<div class="tou"><a id="close">×</a>|<span>东莞莱蒙商业中心</span></div>
<script>  $('#close').click(function(){ $(this).parent('.tou').hide();  }); </script>

style="background-color:#FFF;background-image:none;"


==================================================================================================================

微商城：http://www.multimall.cn/wx/mobile.php?act=module&name=shopping&do=shoplist&weid=1&wxref=mp.weixin.qq.com

01: 首页     【访问路径：首页】  注：已处理

相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php		func: doMobileshoplist
模板文件位置： D:/website/multimall/wx/data/tpl/mobile/modules/shopping/shop_list.tpl.php


02:产品列表1.html  【访问路径：首页 点击广告 】  注：已处理
相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php		func: doMobilelist2  ===> $this-> __comm  ====> mobile/list2.php
===> D:/website/multimall/wx/source/modules/shopping/mobile/list2.php

模板文件位置：  D:/website/multimall/wx/data/tpl/mobile/modules/shopping/list2.tpl.php


03: 我的订单  【访问路径：商城首页 我的订单 】  注：已处理

相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php		func: doMobilemyorder  ===> $this-> __comm  ====>
D:/website/multimall/wx/source/modules/shopping/mobile/myorder.php
// mock here
//$this->checkAuth();
模板文件位置： D:/website/multimall/wx/data/tpl/mobile/modules/shopping/order.tpl.php


04:订单详情   【访问路径：商城首页 我的订单 订单详情 】  注：已处理
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php	doMobilemyorder ===> $this-> __comm  ====>
D:/website/multimall/wx/source/modules/shopping/mobile/myorder.php   ====> $op = detail
// mock here
//$this->checkAuth();

模板文件位置： D:/website/multimall/wx/data/tpl/mobile/modules/shopping/order_detail.tpl.php     订单详情.html


05: 购物车  【访问路径：商城首页 购物车 】  注：已处理

相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php	doMobilemycart   ===> $this-> __comm  ====>
D:/website/multimall/wx/source/modules/shopping/mobile/mycart.php ====>
// mock here
// $this->checkAuth();

模板文件位置： D:/website/multimall/wx/data/tpl/mobile/modules/shopping/cart.tpl.php


06: 结算  【访问路径：商城首页 购物车 结算 】  注：未处理

相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php	doMobileConfirm   ===> $this-> __comm  ====>
D:/website/multimall/wx/source/modules/shopping/mobile/confirm.php ====>
// mock here
// $this->checkAuth();
出现错误无法处理


07: 我的收藏  【访问路径：商城首页 我的收藏 】  注：未处理

相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php	doMobilefavorite  ===> $this-> __comm  ====>
D:/website/multimall/wx/source/modules/shopping/mobile/favorite.php   $op == 'display'
// mock here
// $this->checkAuth();

模板文件位置：  D:/website/multimall/wx/data/tpl/mobile/modules/shopping/favorite.tpl.php    收藏.html


08: 产品详细页.html  【访问路径：广告列表页 商城首页 产品详细页  】  注：已处理

相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php	  doMobiledetail  ===> $this-> __comm  ====>
D:/website/multimall/wx/source/modules/shopping/mobilemobile/detail.php

模板文件位置： D:/website/multimall/wx/data/tpl/mobile/modules/shopping/detail.tpl.php

09: 立即购买  【访问路径：广告列表页 商城首页 产品详细页 立即购买 】 注：未处理  即将处理

相关文件：
D:/website/multimall/wx/source/controller/mobile/module.ctrl.php
D:/website/multimall/wx/source/modules/shopping/site.php  doMobileconfirm  ===> $this-> __comm  ====>
D:/website/multimall/wx/source/modules/shopping/mobile/confirm.php ====>
// mock here
// $this->checkAuth();

模板文件位置： D:/website/multimall/wx/data/tpl/mobile/modules/shopping/confirm.tpl.php  购物车2.html  购物车3（空）.html


2. D:/website/multimall/wx/source/modules/shopping/template/mobile/list2.html
3. D:/website/multimall/wx/data/tpl/mobile/modules/shopping/footerbar.tpl.php

==================================================================================================================

<!DOCTYPE html>
<html>
<head>
	<title>MySQL NOTEBOOK</title>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="/cross/css/reset.css" />
	<link rel="stylesheet" href="/cross/css/samples.doc.css" />
	<script src="/cross/js/jquery-3.min.js"></script>
	<script src="/cross/js/samples.doc.js"></script>
</head>
<body>
	<h1>MySQL 索引<a href="http://www.sample.cn/index.html">索引页</a></h1>

	<h2>MySQL的存储例程和函数</h2>
	<div class="section">
		<h3>为什么要使用存储过程</h3>
		<div>
			<p>下列情况使用存储过程特别有用：</p>
			<p><strong>1、</strong>当用不同语言编写多客户应用程序，或多客户应用程序在不同平台上运行且需要执行相同的数据库操作之时.</p>
			<p><strong>2、</strong>安全极为重要之时.</p>
			<p><strong>3、</strong>由于更多的工作在数据服务器上完成，因此如果许多客户端机器（比如网页服务器）只由一个或少数几个数据库服务器提供服务，可以考虑一下存储程序</p>
			<p><strong>注：</strong>MySQL为存储程序遵循SQL:2003语法，这个语法也被用在IBM的DB2数据库上。</p>
		</div>
		<h3>几点重要说明</h3>
		<div>
			<p><strong>1、</strong>当一个子程序被调用时，一个隐含的USE db_name 被执行（当子程序终止时停止执行）。存储子程序内的USE语句时不允许的。</p>
			<p><strong>2、</strong>同样地可以使用数据库名限定子程序名。比如，要引用一个与test数据库关联的存储程序p或函数f，可以说CALL test.p()或test.f()。</p>
			<p><strong>3、</strong>数据库移除的时候，与它关联的所有存储子程序也都被移除。</p>
			<p><strong>4、</strong>要在MySQL 5.1中创建子程序，必须具有CREATE ROUTINE权限，并且ALTER ROUTINE和EXECUTE权限被自动授予它的创建者。如果二进制日志功能被允许，也可能需要SUPER权限</p>
			<p><strong>5、</strong>避免存储子程序取与存在的SQL函数一样的名字。</p>
			<p><strong>6、</strong>存储子程序和函数的参数默认都是一个IN参数.参数为IN, OUT, 或INOUT 只对PROCEDURE是合法的。（FUNCTION参数总是被认为是IN参数）</p>
			<p><strong>7、</strong>RETURNS子句只能对FUNCTION做指定，对函数而言这是强制的。它用来指定函数的返回类型，而且函数体必须包含一个RETURN value语句。</p>
			<p><strong>8、</strong>外部存储程序的框架将在不久的将来引入。这将允许你用SQL之外的语言编写存储程序。最可能的是，第一个被支持语言是PHP，因为核心PHP引擎很小，线程安全，且可以被方便地嵌入。</p>
			<p><strong>9、</strong>如果程序或线程总是对同样的输入参数产生同样的结果，则被认为它是“确定的”，否则就是“非确定”的。如果既没有给定DETERMINISTIC也没有给定NOT DETERMINISTIC，默认的就是NOT DETERMINISTIC。</p>
		</div>
		<h3>创建存储过程语法示例</h3>
		<div>
			<textarea>
			CREATE PROCEDURE sp_name ([proc_parameter[,...]])
			[characteristic ...] routine_body

			CREATE FUNCTION sp_name ([func_parameter[,...]])
			RETURNS type
			[characteristic ...] routine_body

			proc_parameter:    [ IN | OUT | INOUT ] param_name type
			func_parameter:    param_name type

			type:    Any valid MySQL data type
			characteristic:  LANGUAGE SQL  | [NOT] DETERMINISTIC  | { CONTAINS SQL | NO SQL | READS SQL DATA |
			 MODIFIES SQL DATA }  | SQL SECURITY { DEFINER | INVOKER }  | COMMENT 'string'
 




			</textarea>
		</div>
	</div>
	
	<h2>MySQL日期类型操作函数</h2>
	<div class="section">
		<h3>日期函数</h3>
		<div>
			<p>UNIX时间戳转换为日期用函数： FROM_UNIXTIME()　　　select FROM_UNIXTIME(1156219870);</p>
			<p>日期转换为UNIX时间戳用函数： UNIX_TIMESTAMP()　　　Select UNIX_TIMESTAMP(’2006-11-04 12:23:00′);</p>
			<p>
				<textarea style="height:5rem;">
				例：mysql查询当天的记录数：
				SELECT * FROM message 
				WHERE DATE_FORMAT(FROM_UNIXTIME(chattime),’%Y-%m-%d’) = DATE_FORMAT(NOW(),’%Y-%m-%d’) 
				ORDER BY id desc”;
				</textarea>
			</p>
		</div>
		<h3>函数：FROM_UNIXTIME</h3>
		<div>
			<p>作用：将MYSQL中以INT(11)存储的时间以"YYYY-MM-DD"格式来显示</p>
			<p>语法：FROM_UNIXTIME(unix_timestamp,format) </p>
			<p>返回表示 Unix 时间标记的一个字符串，根据format字符串格式化。format可以包含与DATE_FORMAT()函数列出的条目同样的修饰符。</p>
			<p>根据format字符串格式化date值。下列修饰符可以被用在format字符串中： </p>
			<p>%M 月名字(January……December)</p>
			<p>%W 星期名字(Sunday……Saturday)</p>
			<p>%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）</p>
			<p>%Y 年, 数字, 4 位</p>
			<p>%y 年, 数字, 2 位</p>
			<p>%a 缩写的星期名字(Sun……Sat)</p>
			<p>%d 月份中的天数, 数字(00……31)</p>
			<p>%e 月份中的天数, 数字(0……31)</p>
			<p>%m 月, 数字(01……12)</p>
			<p>%c 月, 数字(1……12)</p>
			<p>%b 缩写的月份名字(Jan……Dec)</p>
			<p>%j 一年中的天数(001……366)</p>
			<p>%H 小时(00……23)</p>
			<p>%k 小时(0……23)</p>
			<p>%h 小时(01……12)</p>
			<p>%I 小时(01……12)</p>
			<p>%l 小时(1……12)</p>
			<p>%i 分钟, 数字(00……59)</p>
			<p>%r 时间,12 小时(hh:mm:ss [AP]M)</p>
			<p>%T 时间,24 小时(hh:mm:ss)</p>
			<p>%S 秒(00……59)</p>
			<p>%s 秒(00……59)</p>
			<p>%p AM或PM</p>
			<p>%w 一个星期中的天数(0=Sunday ……6=Saturday ）</p>
			<p>%U 星期(0……52), 这里星期天是星期的第一天</p>
			<p>%u 星期(0……52), 这里星期一是星期的第一天</p>
			<p>%% 一个文字“%”。</p>
			<p>例子：SELECT FROM_UNIXTIME(1234567890, '%Y-%m-%d %H:%i:%S') </p>
			<p>SELECT *,FROM_UNIXTIME(created, '%Y-%m-%d') as riqi FROM `rc_ms_users`</p>
		</div>
	</div>
	
	<h2>修改列</h2>
	<div class="section">
		<h3>修改列[modife 列名]</h3>
		<div>
			<p>alter table 表名 modify 列名 新类型 新参数【修改列类型】</p>
			<p>例：alter table test modify gender char(4) not null default '';</p>
			<p>alter table 表名 change 旧列名 新列名 新类型 新参数【修改列名和列类型】</p>
			<p>例：alter table test change pid uid int unsigned not null default 0;</p>
		</div>
	</div>
	
	<h2>修改索引</h2>
	<div class="section">
		<h3>添加或删除主键索引</h3>
		<div>
			<p><strong>添加:</strong>ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` ) </p>
			<p><strong>删除::</strong>ALTER TABLE table_name DROP PRIMARY KEY</p>
		</div>
		<h3>添加或删除唯一索引</h3>
		<div>
			<p><strong>添加:</strong>ALTER TABLE `table_name` ADD UNIQUE ( `column` ) </p>
			<p><strong>删除::</strong>DROP INDEX index_name ON talbe_name</p>
			<p><strong>删除::</strong>ALTER TABLE table_name DROP INDEX index_name</p>
		</div>
		<h3>添加或删除INDEX(普通索引) </h3>
		<div>
			<p><strong>添加:</strong>ALTER TABLE `table_name` ADD INDEX index_name ( `column` )</p>
			<p><strong>删除::</strong>DROP INDEX index_name ON talbe_name</p>
			<p><strong>删除::</strong>ALTER TABLE table_name DROP INDEX index_name</p>
		</div>
		<h3>删除索引说明</h3>
		<div>
			<p>如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。</p>
			<p>如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。</p>
			<p>如果删除组成索引的所有列，则整个索引将被删除。</p>
		</div>
		<h3>添加多列索引 </h3>
		<div>
			<p>ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )</p>
		</div>
		<h3>查看索引 </h3>
		<div>
			<p>SHOW INDEX FROM tblname; </p>
			<p>SHOW KEYS FROM tblname;</p>
		</div>
		<h3>设置MySQL自动增长的起始值</h3>
		<div>
			<p>ALTER TABLE table_name AUTO_INCREMENT=n</p>
			<p>此命令仅在当前会话时有效</p>
		</div>
	</div>	
	<h2>查询性能优化</h2>
	<div class="section">
		<h3>为什么会查询慢</h3>
		<div>
			<p>在完成任务的时候，查询需要在不同的地方花费时间，包括网络，CPU计算，生成统计信息和执行计划、锁等（互斥等待）等操作，尤其是向底层存储引擎检查数据的调用操作，这些调用需要在内存操作、CPU操作和内存不足时导致的I/O操作上消耗时间 。根据存储引擎不同，可能还会产生大量的上下文切换以及系统调用。</p>
			<p>在每一个消耗大量时间的查询案例中，都可以看到一些不必要的额外操作，某些操作被额外地重复了很多次，基本些操作执行得太慢等，优化查询的目的就是减少和消除这些操作所花费的时间。</p>
			<p>慢查询通常需要分析以下两点原因：</p>
			<p>1.确认应用程序是否在检查大量超过需要的数据。这通常意味着访问了太多的行，但有时候也可能访问了太多的列。</p>
			<p>2.确认MySQL服务器层是否在分析大量超过需要的数据行。</p>
		</div>
	</div>

</body>
</html>
